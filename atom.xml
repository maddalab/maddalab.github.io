<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rentrant thoughts]]></title>
  <link href="http://maddalab.github.io/atom.xml" rel="self"/>
  <link href="http://maddalab.github.io/"/>
  <updated>2013-05-21T08:53:02-04:00</updated>
  <id>http://maddalab.github.io/</id>
  <author>
    <name><![CDATA[Bhaskar Maddala]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Final modifiers on Method Parameter in Java]]></title>
    <link href="http://maddalab.github.io/blog/2010/07/10/final-modifiers-on-method-parameter-in-java/"/>
    <updated>2010-07-10T08:55:00-04:00</updated>
    <id>http://maddalab.github.io/blog/2010/07/10/final-modifiers-on-method-parameter-in-java</id>
    <content type="html"><![CDATA[<p>Every so often I run in a Java programmer who uses the final modifier in method parameters in Java. The code usually looks as follows</p>

<figure class='code'><figcaption><span>Example </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">executeOperation</span><span class="o">(</span><span class="kd">final</span> <span class="n">OperationType</span> <span class="n">ot</span><span class="o">,</span> <span class="kd">final</span> <span class="n">OperationParameters</span> <span class="n">op</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I often wonder whether the programmer has a sufficiently clear understanding of the final modifier when using it is such fashion. Given the JVM call by value semantics, there is only a small benefit associated with the additional typing undertaken to add the final modifier on each method parameter. One question you can expect from someone who has used the final modifier without understanding its implications (or lack of) in the context of method parameters involves overriding such methods and the resolution of the same. This question was recently asked on a mailing list I frequent.</p>

<p>In the following code snippets</p>

<figure class='code'><figcaption><span>Example </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Base</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">methodA</span><span class="o">(</span><span class="kd">final</span> <span class="n">Type</span> <span class="n">xyz</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Derived</span> <span class="kd">extends</span> <span class="n">Base</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodA</span><span class="o">(</span><span class="n">Type</span> <span class="n">xyz</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// .. code</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Or when using interfaces</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Interface</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodA</span><span class="o">(</span><span class="kd">final</span> <span class="n">Type</span> <span class="n">xyz</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Implementation</span> <span class="kd">implements</span> <span class="n">Interface</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodA</span><span class="o">(</span><span class="n">Type</span> <span class="n">xyz</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why does the compiler not complain, since I am not overriding the method because the signature is not the same.</p>

<p>There are obviously a couple of trivial answers, one of which provided in the mailing list is &ldquo;Whether or not a method parameter is final isn&rsquo;t one of the considerations taken into account when determining whether or not two methods have override-equivalent signature&rdquo;, accompanied by the obligatory reference to JLS 8.4.2 on Method Signatures. The answer adds to my chagrin, not only is it not a good answer it takes a good learning opportunity and converts it into a rote reference to printed material already available on the internet. This was the answer provided to the question on the mailing list and to my surprise was accepted by the original post.</p>

<p>What then would be a sufficiently good answer? In the remainder of this post I set out my stall and attempt to address the original question. The goal it explain the reason for why the final modifier is not considered part of the method signature.</p>

<!-- more -->


<p>One reason that I see increasingly more programmers using the final modifier on method parameter is the proliferation of programming languages on the JVM and the increasing extent of the use of multi core processors it is fanciful to try to bring the benefits of immutable state programming from the newer languages to Java. Programmers without a good understanding of any of the languages or the JVM mechanisms use final method modifiers excessively.</p>

<p>Tho, the number of languages on the JVM it is worth recalling the the Java language and the JVM was developed at the same time, and that the JVM was developed primarily for execution of Java sources. As a consequence the JLS specification was constrained by implementation choices on the JVM and vice versa. There was no intention of hosting other languages on the JVM. This situation is currently changing with the upcoming Java 7 release of the language and JVM with support for closures and method handles in the language and the JVM respectively.</p>

<p>What then prevent the JLS to enforce final annotation when resolving overridden method? The JVM obviously, has no knowledge of final modifiers on method parameters, they are just language syntactic sugar. We will demonstrate this using the following code, which uses ASM to perform byte code manipulation. (Explanation of the important snippets follows immediately after)</p>

<figure class='code'><figcaption><span>Final Variable Transformer </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// FILE: FinalVariableTransformer.java</span>
</span><span class='line'>
</span><span class='line'><span class="kn">package</span> <span class="n">c</span><span class="o">.</span><span class="na">a</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">objectweb</span><span class="o">.</span><span class="na">asm</span><span class="o">.</span><span class="na">Opcodes</span><span class="o">.</span><span class="na">BIPUSH</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">objectweb</span><span class="o">.</span><span class="na">asm</span><span class="o">.</span><span class="na">Opcodes</span><span class="o">.</span><span class="na">ILOAD</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">objectweb</span><span class="o">.</span><span class="na">asm</span><span class="o">.</span><span class="na">Opcodes</span><span class="o">.</span><span class="na">IMUL</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">objectweb</span><span class="o">.</span><span class="na">asm</span><span class="o">.</span><span class="na">Opcodes</span><span class="o">.</span><span class="na">ISTORE</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedInputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedOutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.instrument.ClassFileTransformer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.instrument.IllegalClassFormatException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.instrument.Instrumentation</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.security.ProtectionDomain</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.objectweb.asm.ClassAdapter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.objectweb.asm.ClassReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.objectweb.asm.ClassVisitor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.objectweb.asm.ClassWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.objectweb.asm.MethodAdapter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.objectweb.asm.MethodVisitor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.objectweb.asm.Opcodes</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">InsertInstructionMethodAdapter</span> <span class="kd">extends</span> <span class="n">MethodAdapter</span> <span class="o">{</span>
</span><span class='line'> <span class="kd">public</span> <span class="nf">InsertInstructionMethodAdapter</span><span class="o">(</span><span class="n">MethodVisitor</span> <span class="n">mv</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">(</span><span class="n">mv</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="nd">@Override</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitVarInsn</span><span class="o">(</span><span class="kt">int</span> <span class="n">opcode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">var</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">opcode</span> <span class="o">==</span> <span class="n">Opcodes</span><span class="o">.</span><span class="na">ILOAD</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">var</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="c1">// MULTIPLY VAR 1 (i) BY 2</span>
</span><span class='line'>   <span class="n">mv</span><span class="o">.</span><span class="na">visitVarInsn</span><span class="o">(</span><span class="n">ILOAD</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>   <span class="n">mv</span><span class="o">.</span><span class="na">visitIntInsn</span><span class="o">(</span><span class="n">BIPUSH</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>   <span class="n">mv</span><span class="o">.</span><span class="na">visitInsn</span><span class="o">(</span><span class="n">IMUL</span><span class="o">);</span>
</span><span class='line'>   <span class="c1">// STORE VAR 1 (i)</span>
</span><span class='line'>   <span class="n">mv</span><span class="o">.</span><span class="na">visitVarInsn</span><span class="o">(</span><span class="n">ISTORE</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">visitVarInsn</span><span class="o">(</span><span class="n">opcode</span><span class="o">,</span> <span class="n">var</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">InsertInstructionClassAdapter</span> <span class="kd">extends</span> <span class="n">ClassAdapter</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">public</span> <span class="nf">InsertInstructionClassAdapter</span><span class="o">(</span><span class="n">ClassVisitor</span> <span class="n">cv</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">(</span><span class="n">cv</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="nd">@Override</span>
</span><span class='line'> <span class="kd">public</span> <span class="n">MethodVisitor</span> <span class="nf">visitMethod</span><span class="o">(</span><span class="kt">int</span> <span class="n">access</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">desc</span><span class="o">,</span>
</span><span class='line'>   <span class="n">String</span> <span class="n">signature</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">exceptions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">MethodVisitor</span> <span class="n">mv</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">visitMethod</span><span class="o">(</span><span class="n">access</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">desc</span><span class="o">,</span> <span class="n">signature</span><span class="o">,</span>
</span><span class='line'>    <span class="n">exceptions</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="s">&quot;timesTen&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span>
</span><span class='line'>   <span class="k">return</span> <span class="k">new</span> <span class="nf">InsertInstructionMethodAdapter</span><span class="o">(</span><span class="n">mv</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">mv</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">InsertInstructionTransformer</span> <span class="kd">implements</span> <span class="n">ClassFileTransformer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'> <span class="nd">@Override</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">transform</span><span class="o">(</span><span class="n">ClassLoader</span> <span class="n">loader</span><span class="o">,</span> <span class="n">String</span> <span class="n">className</span><span class="o">,</span>
</span><span class='line'>   <span class="n">Class</span> <span class="n">classBeingRedefined</span><span class="o">,</span> <span class="n">ProtectionDomain</span> <span class="n">protectionDomain</span><span class="o">,</span>
</span><span class='line'>   <span class="kt">byte</span><span class="o">[]</span> <span class="n">classfileBuffer</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IllegalClassFormatException</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">transform</span><span class="o">(</span><span class="n">classfileBuffer</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">transform</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">classfileBuffer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">ClassReader</span> <span class="n">cr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassReader</span><span class="o">(</span><span class="n">classfileBuffer</span><span class="o">);</span>
</span><span class='line'>  <span class="n">ClassWriter</span> <span class="n">cw</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassWriter</span><span class="o">(</span><span class="n">ClassWriter</span><span class="o">.</span><span class="na">COMPUTE_FRAMES</span><span class="o">);</span>
</span><span class='line'>  <span class="n">ClassAdapter</span> <span class="n">ca</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InsertInstructionClassAdapter</span><span class="o">(</span><span class="n">cw</span><span class="o">);</span>
</span><span class='line'>  <span class="n">cr</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">ca</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">cw</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">transform</span><span class="o">(</span><span class="n">String</span> <span class="n">source</span><span class="o">,</span> <span class="n">String</span> <span class="n">target</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">writeFileAsBytes</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">target</span><span class="o">),</span> <span class="n">transform</span><span class="o">(</span><span class="n">getFileAsBytes</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span>
</span><span class='line'>    <span class="n">source</span><span class="o">))));</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeFileAsBytes</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">BufferedOutputStream</span> <span class="n">bos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedOutputStream</span><span class="o">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">FileOutputStream</span><span class="o">(</span><span class="n">file</span><span class="o">));</span>
</span><span class='line'>  <span class="n">bos</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span><span class='line'>  <span class="n">bos</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">private</span> <span class="kd">final</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">getFileAsBytes</span><span class="o">(</span><span class="kd">final</span> <span class="n">File</span> <span class="n">file</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">BufferedInputStream</span> <span class="n">bis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedInputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span>
</span><span class='line'>    <span class="n">file</span><span class="o">));</span>
</span><span class='line'>  <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[(</span><span class="kt">int</span><span class="o">)</span> <span class="n">file</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
</span><span class='line'>  <span class="n">bis</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span><span class='line'>  <span class="n">bis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">bytes</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FinalVariableTransformer</span> <span class="o">{</span>
</span><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">premain</span><span class="o">(</span><span class="n">String</span> <span class="n">agentArguments</span><span class="o">,</span>
</span><span class='line'>   <span class="n">Instrumentation</span> <span class="n">instrumentation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">instrumentation</span><span class="o">.</span><span class="na">addTransformer</span><span class="o">(</span><span class="k">new</span> <span class="n">InsertInstructionTransformer</span><span class="o">());</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Require source and target&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="k">return</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">InsertInstructionTransformer</span> <span class="n">transformer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InsertInstructionTransformer</span><span class="o">();</span>
</span><span class='line'>  <span class="n">transformer</span><span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// FILE META-INF/MANIFEST.MF</span>
</span><span class='line'><span class="n">Manifest</span><span class="o">-</span><span class="nl">Version:</span> <span class="mf">1.0</span>
</span><span class='line'><span class="n">Premain</span><span class="o">-</span><span class="nl">Class:</span> <span class="n">c</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">FinalVariableTransformer</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// CLIENT CLASS</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Simple</span> <span class="o">{</span>
</span><span class='line'> <span class="c1">// modify this to be timesTwenty</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">int</span> <span class="nf">timesTen</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Simple</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Simple</span><span class="o">();</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">timesTen</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ON THE COMMAND LINE RUN WITH</span>
</span><span class='line'>
</span><span class='line'><span class="n">java</span> <span class="o">-</span><span class="nl">javaagent:</span><span class="n">FinalVariableTransformerPackagedAsjar</span> <span class="n">Simple</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// AND COMPARE RESULTS WITH JAVAP</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is quite a lot of code, let up take it down in small pieces. The following is the Manifest entry for the premain class when our code is packaged as a jar</p>

<figure class='code'><figcaption><span>MANIFEST.MF </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// FILE META-INF/MANIFEST.MF</span>
</span><span class='line'><span class="n">Manifest</span><span class="o">-</span><span class="nl">Version:</span> <span class="mf">1.0</span>
</span><span class='line'><span class="n">Premain</span><span class="o">-</span><span class="nl">Class:</span> <span class="n">c</span><span class="o">.</span><span class="na">a</span><span class="o">.</span><span class="na">FinalVariableTransformer</span>
</span></code></pre></td></tr></table></div></figure>


<p>The presence of the Premain-Class should indicate to the reader that the class provides a premain method for class instrumentation, using the java.lang.Instrumenation [2] API&rsquo;s. The class FinalVariableTransformer is defined as such</p>

<figure class='code'><figcaption><span>Premain </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FinalVariableTransformer</span> <span class="o">{</span>
</span><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">premain</span><span class="o">(</span><span class="n">String</span> <span class="n">agentArguments</span><span class="o">,</span>
</span><span class='line'>   <span class="n">Instrumentation</span> <span class="n">instrumentation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">instrumentation</span><span class="o">.</span><span class="na">addTransformer</span><span class="o">(</span><span class="k">new</span> <span class="n">InsertInstructionTransformer</span><span class="o">());</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Require source and target&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="k">return</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">InsertInstructionTransformer</span> <span class="n">transformer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InsertInstructionTransformer</span><span class="o">();</span>
</span><span class='line'>  <span class="n">transformer</span><span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We implement the method premain with the signature as defined by the API&rsquo;s. We instantiate an instance of InsertInstructionTransformer and add it to the chain of applicable transformations by invoking add on the Instrumentation instance method parameter to premain. InsertInstructionTransformer is defined as below</p>

<figure class='code'><figcaption><span>Instruction transformer </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">InsertInstructionTransformer</span> <span class="kd">implements</span> <span class="n">ClassFileTransformer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'> <span class="nd">@Override</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">transform</span><span class="o">(</span><span class="n">ClassLoader</span> <span class="n">loader</span><span class="o">,</span> <span class="n">String</span> <span class="n">className</span><span class="o">,</span>
</span><span class='line'>   <span class="n">Class</span> <span class="n">classBeingRedefined</span><span class="o">,</span> <span class="n">ProtectionDomain</span> <span class="n">protectionDomain</span><span class="o">,</span>
</span><span class='line'>   <span class="kt">byte</span><span class="o">[]</span> <span class="n">classfileBuffer</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IllegalClassFormatException</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nf">transform</span><span class="o">(</span><span class="n">classfileBuffer</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">transform</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">classfileBuffer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">ClassReader</span> <span class="n">cr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassReader</span><span class="o">(</span><span class="n">classfileBuffer</span><span class="o">);</span>
</span><span class='line'>  <span class="n">ClassWriter</span> <span class="n">cw</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassWriter</span><span class="o">(</span><span class="n">ClassWriter</span><span class="o">.</span><span class="na">COMPUTE_FRAMES</span><span class="o">);</span>
</span><span class='line'>  <span class="n">ClassAdapter</span> <span class="n">ca</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InsertInstructionClassAdapter</span><span class="o">(</span><span class="n">cw</span><span class="o">);</span>
</span><span class='line'>  <span class="n">cr</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">ca</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">cw</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">transform</span><span class="o">(</span><span class="n">String</span> <span class="n">source</span><span class="o">,</span> <span class="n">String</span> <span class="n">target</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">writeFileAsBytes</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">target</span><span class="o">),</span> <span class="n">transform</span><span class="o">(</span><span class="n">getFileAsBytes</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span>
</span><span class='line'>    <span class="n">source</span><span class="o">))));</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeFileAsBytes</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">BufferedOutputStream</span> <span class="n">bos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedOutputStream</span><span class="o">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">FileOutputStream</span><span class="o">(</span><span class="n">file</span><span class="o">));</span>
</span><span class='line'>  <span class="n">bos</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span><span class='line'>  <span class="n">bos</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">private</span> <span class="kd">final</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">getFileAsBytes</span><span class="o">(</span><span class="kd">final</span> <span class="n">File</span> <span class="n">file</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">BufferedInputStream</span> <span class="n">bis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedInputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span>
</span><span class='line'>    <span class="n">file</span><span class="o">));</span>
</span><span class='line'>  <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[(</span><span class="kt">int</span><span class="o">)</span> <span class="n">file</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
</span><span class='line'>  <span class="n">bis</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span><span class='line'>  <span class="n">bis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">bytes</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>InsertInstructionTransformer implements the interface ClassFileTransformer and provides an implementation of the transform method. While the class InsertInstructionTransformer has methods to obtain the bytes associated with a class, we are mostly interested in the following method</p>

<figure class='code'><figcaption><span>Implementation of transform </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">transform</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">classfileBuffer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">ClassReader</span> <span class="n">cr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassReader</span><span class="o">(</span><span class="n">classfileBuffer</span><span class="o">);</span>
</span><span class='line'>  <span class="n">ClassWriter</span> <span class="n">cw</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassWriter</span><span class="o">(</span><span class="n">ClassWriter</span><span class="o">.</span><span class="na">COMPUTE_FRAMES</span><span class="o">);</span>
</span><span class='line'>  <span class="n">ClassAdapter</span> <span class="n">ca</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InsertInstructionClassAdapter</span><span class="o">(</span><span class="n">cw</span><span class="o">);</span>
</span><span class='line'>  <span class="n">cr</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">ca</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">cw</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ven a class file as a byte array, we instance an instance of ClassReader which is part of the ASM byte code manipulation library. The ASM library provide easy mechanism for byte code manipulation. The API provide 2 ways to access class byte code, one uses a Tree API and the other a Visitor design pattern. The following code uses the Visitor design pattern. Of interest to us is the implementation of InsertInstructionClassAdapter</p>

<figure class='code'><figcaption><span>Instruction class adapter </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">InsertInstructionClassAdapter</span> <span class="kd">extends</span> <span class="n">ClassAdapter</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">public</span> <span class="nf">InsertInstructionClassAdapter</span><span class="o">(</span><span class="n">ClassVisitor</span> <span class="n">cv</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">(</span><span class="n">cv</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="nd">@Override</span>
</span><span class='line'> <span class="kd">public</span> <span class="n">MethodVisitor</span> <span class="nf">visitMethod</span><span class="o">(</span><span class="kt">int</span> <span class="n">access</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">desc</span><span class="o">,</span>
</span><span class='line'>   <span class="n">String</span> <span class="n">signature</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">exceptions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">MethodVisitor</span> <span class="n">mv</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">visitMethod</span><span class="o">(</span><span class="n">access</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">desc</span><span class="o">,</span> <span class="n">signature</span><span class="o">,</span>
</span><span class='line'>    <span class="n">exceptions</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="s">&quot;timesTen&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span>
</span><span class='line'>   <span class="k">return</span> <span class="k">new</span> <span class="nf">InsertInstructionMethodAdapter</span><span class="o">(</span><span class="n">mv</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">mv</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>InsertInstructionClassAdapter extends ClassAdapter and makes use of the method visitor returned by the super implementation. The default implementation of Visitor interfaces in ASM do not provide for any manipulation, that is out responsibility. We wish to change the byte code of any method with the name <code>timesTen</code> and return the method visitor implementation InsertInstructionMethodAdapter when a method with this name is encountered.</p>

<p> us examine the class InsertInstructionMethodAdapter, reproduced below</p>

<figure class='code'><figcaption><span>Instruction method adapter </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">InsertInstructionMethodAdapter</span> <span class="kd">extends</span> <span class="n">MethodAdapter</span> <span class="o">{</span>
</span><span class='line'> <span class="kd">public</span> <span class="nf">InsertInstructionMethodAdapter</span><span class="o">(</span><span class="n">MethodVisitor</span> <span class="n">mv</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">(</span><span class="n">mv</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="nd">@Override</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitVarInsn</span><span class="o">(</span><span class="kt">int</span> <span class="n">opcode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">var</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">opcode</span> <span class="o">==</span> <span class="n">Opcodes</span><span class="o">.</span><span class="na">ILOAD</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">var</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="c1">// MULTIPLY VAR 1 (i) BY 2</span>
</span><span class='line'>   <span class="n">mv</span><span class="o">.</span><span class="na">visitVarInsn</span><span class="o">(</span><span class="n">ILOAD</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>   <span class="n">mv</span><span class="o">.</span><span class="na">visitIntInsn</span><span class="o">(</span><span class="n">BIPUSH</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>   <span class="n">mv</span><span class="o">.</span><span class="na">visitInsn</span><span class="o">(</span><span class="n">IMUL</span><span class="o">);</span>
</span><span class='line'>   <span class="c1">// STORE VAR 1 (i)</span>
</span><span class='line'>   <span class="n">mv</span><span class="o">.</span><span class="na">visitVarInsn</span><span class="o">(</span><span class="n">ISTORE</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">visitVarInsn</span><span class="o">(</span><span class="n">opcode</span><span class="o">,</span> <span class="n">var</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>While the MethodVisitor provides for many methods to be overridden we override just the <code>visitVarInsn</code> method. On the occurrence of a load Opcode with for the first method parameter we insert the following opcodes prior to passing in the original opcode the the parent method adapter.</p>

<figure class='code'><figcaption><span>Method Visitor </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// MULTIPLY VAR 1 (i) BY 2</span>
</span><span class='line'>   <span class="n">mv</span><span class="o">.</span><span class="na">visitVarInsn</span><span class="o">(</span><span class="n">ILOAD</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>   <span class="n">mv</span><span class="o">.</span><span class="na">visitIntInsn</span><span class="o">(</span><span class="n">BIPUSH</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>   <span class="n">mv</span><span class="o">.</span><span class="na">visitInsn</span><span class="o">(</span><span class="n">IMUL</span><span class="o">);</span>
</span><span class='line'>   <span class="c1">// STORE VAR 1 (i)</span>
</span><span class='line'>   <span class="n">mv</span><span class="o">.</span><span class="na">visitVarInsn</span><span class="o">(</span><span class="n">ISTORE</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We load the first method parameter, push the constant 2 on to the stack, multiply the first 2 elements on the stack and store the result to the method parameter value. Looking at our Simple class, reproduced below</p>

<figure class='code'><figcaption><span>Class to be modified </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// CLIENT CLASS</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Simple</span> <span class="o">{</span>
</span><span class='line'> <span class="c1">// modify this to be timesTwenty</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">int</span> <span class="nf">timesTen</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Simple</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Simple</span><span class="o">();</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">timesTen</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is the equivalent of performing the following source code transformation</p>

<figure class='code'><figcaption><span>Class after modification </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// CLIENT CLASS</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Simple</span> <span class="o">{</span>
</span><span class='line'> <span class="c1">// modify this to be timesTwenty</span>
</span><span class='line'> <span class="kd">public</span> <span class="kt">int</span> <span class="nf">timesTen</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">i</span> <span class="o">*=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Simple</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Simple</span><span class="o">();</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">timesTen</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clearly this not something that the Java compiler would permit you to do, however running the code passes it through the byte code verifier that is part of the JVM and executes successfully with the result of multiplication by 20 rather than 10. Or put another way the JVM does not understand finality with reference to method parameters. Which begs the question, but why.</p>

<p>As any Java programmer would tell in java you maintain and pass around reference to object. Most will also tell you that Java (by extension the JVM) supports only call by value. Often not understood and lost in the trivial statement of fact is how the references interact when passed by value. It is the value of the reference that is passed to the invoked method, take a moment to read that again, value of the reference. Any changes to the value does not impact the original reference, only changes to the referenced object are visible outside of the method when it returns. Or, the JVM has no use for enforcing of method parameter finality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resumes are ridiculous but so are cover letters]]></title>
    <link href="http://maddalab.github.io/blog/2010/03/28/resumes-are-ridiculous-but-so-are-cover-letters-a-critique-on-rework-by-37signals/"/>
    <updated>2010-03-28T08:43:00-04:00</updated>
    <id>http://maddalab.github.io/blog/2010/03/28/resumes-are-ridiculous-but-so-are-cover-letters-a-critique-on-rework-by-37signals</id>
    <content type="html"><![CDATA[<p>37Signals as a company is an Outlier, successful from a number of measures and with limited success if viewed from a different perspective.</p>

<p>Their recent book Rework shines a light on ideas and practices that makes them successful at what they do. 37Signals as a company considers itself to be successful, however with few ideas on how to scale their ideas. Measuring success unfortunately is based on the scale that you operate. Is 37Signals as successful as Apple? No. Will they ever be as successful as Apple? No. Do they care? No. While comparing most companies with Apple would make the company look unsuccessful, the measure of success is relative to your reference. Pick a company X that is substantially less successful than Apple and compare it with 37Signals, how does company X fare? Or 37Signals? On what measure of success do you compare? How does Apple from 10 yrs back compare to 37Signals.</p>

<p>Human beings are inclined to be certain, certainty is a mental state, not unlike anger or pride it can help guide you but does not dependably reflect objective truth. If you make the mistake of emphasizing your certainty it provides a positive feedback loop making you entirely more certain <a href="http://www.amazon.com/Being-Certain-Believing-Right-Youre/dp/031254152X/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1269833754&amp;sr=1-1">on being certain</a>. This invariably results in downfall, you are <a href="http://www.amazon.com/Fooled-Randomness-Hidden-Chance-Markets/dp/1400067936/ref=sr_1_fkmr0_1?ie=UTF8&amp;qid=1269832205&amp;sr=1-1-fkmr0">fooled by randomness</a>, and fail to grasp the significance of the hidden role of chance in you success. Outwardly 37Signals as a company comes off as being certain (this may not be true once you are in the fold), but you should be aware of the positive reinforcement of being certain. Read Rework if you have to but do not use its pontification to validate your strategy. Test and retest your ideas often, be uncertain. You might find that previously successful ideas not longer work and vice verse.</p>

<!-- more -->


<p>I have not read Rework, do not intend to. The book resonates with some <a href="http://superamit.tumblr.com/post/478158937/i-picked-up-and-read-the-new-37signals">entrepreneurs</a>. On the strategy of hiring the book says the following</p>

<ul>
<li><p>Resumes are ridiculous</p>

<p>“You want a specific candidate who cares specifically about your company, your products, your customers, and your job… Check their cover letter … you hear someone’s actual voice and are able to recognize if it’s in tune with you and your company. Trust your gut reaction.”</p></li>
</ul>


<p>&ldquo;Check their cover letter&rdquo; are you kidding me, what bull. I certainly agree with the idea that resumes are ridiculous, however cover letters are an extension of the resume, written by the same individual, for the same purpose. They are just as ridiculous.</p>

<p>You certainly want a candidate who cares about your company, your products and your customers. However care comes with trust, and trust is developed over a period of time, like in any symbiotic relationship. If you are true to yourself, look only for a candidate who cares about the job. Resumes, cover letters and what a candidate says (to be in tune with you and your company) only indicate that the candidate cares about the paycheck and benefits you might offer. Determine if the candidate cares about the job and he/she will eventually care about your company, product and customer.</p>

<p>For a position in programming (which is what I am most familiar with and competent to speak about) it is fairly easy to determine if the candidate cares about the job. To care about the job the candidate needs to care about programming and in the age of the internet it is fairly easy to demonstrate.</p>

<p>Do your research on the candidate, it is not just about knowing algorithms and the ability to apply those to problem solving it is also about what you have done with the ability in the past. A lot of companies hire candidates based on past performance. Do not look too far into the past, the immediate past is significantly better indicator of success. It does not matter that the candidate has graduated from a top tier school if it was 5 yrs in the past as it matters if the candidate contributes to open source projects? It does not matter if the candidate is a top performer during the past 5 yrs in his current position, if he/she desires to leave current employment determine why. If the candidate is leaving in spite of caring about the current company, product and customer, (on which you have to take the candidates word for), determine only if the candidate cares about the job. It is your best indicator of success.</p>

<p>As a corollary, never hire someone who does not care about the job. But, you would never do that would you, irrespective of what their resume or cover letter says, would you?</p>

<p>Am I being certain?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On why double checked locking is an anti-pattern]]></title>
    <link href="http://maddalab.github.io/blog/2010/03/27/on-why-double-checked-locking-is-an-anti-pattern/"/>
    <updated>2010-03-27T22:06:00-04:00</updated>
    <id>http://maddalab.github.io/blog/2010/03/27/on-why-double-checked-locking-is-an-anti-pattern</id>
    <content type="html"><![CDATA[<p>If you are a Java programmer by now you are probably aware of the double checked locking concurrency anti-pattern.</p>

<figure class='code'><figcaption><span>Incorrect double checked locking </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">ResourceAccessor</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Resource</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Resource</span> <span class="nf">getResource</span><span class="o">(){</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span><span class="o">(</span><span class="n">ResourceAccessor</span><span class="o">.</span><span class="na">class</span><span class="o">){</span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Resource</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are several variation of double check locking code style, but the important lines of code are 5 and 7. The check for resource before obtaining a lock on line 5 and a second check on line 7.</p>

<p>This fancy trick employed specifically in early version of Java to optimize code to avoid (then) expensive lock operations has been found to be wrong. Often the best explanations will tell you that &ldquo;a second thread may see a partially constructed resource object&rdquo;.</p>

<p>You might also find the following alternative of a correct implementation</p>

<figure class='code'><figcaption><span>Correct double checked locking </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">ResourceAccessor</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="n">Resource</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Resource</span> <span class="nf">getResource</span><span class="o">(){</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span><span class="o">(</span><span class="n">ResourceAccessor</span><span class="o">.</span><span class="na">class</span><span class="o">){</span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Resource</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason for both the correct and incorrect behavior are rooted in the Java Memory Model, which can be found at <a href="http://java.sun.com/docs/books/jls/third_edition/html/memory.html">Chapter 17</a> off the Java Language Specification. Unfortunately most explanation stop there, along with, on occasion a reference to the &ldquo;happens before&rdquo; ordering referenced by the Java Memory Model.</p>

<p>We will dig a little deeper to try to better understand the reason for why double checked locking is incorrect and also look at why using a volatile reference to the variable fixes it.</p>

<!-- more -->


<p>Abstractions while necessary to hide complexity in large systems also prevent us from gaining a better understanding the behavior of the systems. We will use java byte code in an attempt to help us understand the reasons, it serves our purpose in this instance, however be aware that byte code is only an abstraction.</p>

<p>Java does not enforce a full execution order on code, it provides only a partial ordering defined in Chapter 17 of the language specification as happens-before. Quite simply it mean the results of a write by one thread are guaranteed to be visible to a read by another thread only if the write operation happens-before the read operation. Intuitively this is correct, however how does a programmer enforce a happens-before ordering in code.</p>

<p>Happens-before ordering can be enforced using one of the synchronization mechanism provided by Java</p>

<ul>
<li>Locks, either intrinsic locking using synchronized or using locks from java.util.concurrent which have the same semantics as intrinsic locking</li>
<li>volatile, reads and write to volatile variables are atomic.</li>
<li>Thread.start() and Thread.join() method invocation</li>
</ul>


<p>A more refined version of happen-before ordering is defined in the package javadoc for java.util.concurrent as follows</p>

<ul>
<li>Each action in a thread happens-before every action in that thread that comes later in the program&rsquo;s order.</li>
<li>An unlock (synchronized block or method exit) of a monitor happens-before every subsequent lock (synchronized block or method entry) of that same monitor. And because the happens-before relation is transitive, all actions of a thread prior to unlocking happen-before all actions subsequent to any thread locking that monitor.</li>
<li>A write to a volatile field happens-before every subsequent read of that same field. Writes and reads of volatile fields have similar memory consistency effects as entering and exiting monitors, but do not entail mutual exclusion locking.</li>
<li>A call to start on a thread happens-before any action in the started thread.</li>
<li>All actions in a thread happen-before any other thread successfully returns from a join on that thread.</li>
</ul>


<p>Taking a closer look at the original double checked locking code (reproduced here)</p>

<figure class='code'><figcaption><span>Incorrect double checked locking </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">ResourceAccessor</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="n">Resource</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Resource</span> <span class="nf">getResource</span><span class="o">(){</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span><span class="o">(</span><span class="n">ResourceAccessor</span><span class="o">.</span><span class="na">class</span><span class="o">){</span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Resource</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It would seems that the rule
*   Each action in a thread happens-before every action in that thread that comes later in the program&rsquo;s order.
would require that we see only references to resource r that are fully constructed. Since the program order requires that a new Resource() be created before being assigned to variable r.</p>

<p>As mentioned previously the Java language is an abstraction over the byte code specification, and what seems like 2 statements from the Java language perspective is anything but</p>

<p>The single statement translates to the following byte code</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>18: new #4; //class ResourceAccessor$Resource
</span><span class='line'>21: dup
</span><span class='line'>22: aconst_null
</span><span class='line'>23: invokespecial #5; //Method ResourceAccessor$Resource."
</span><span class='line'>":(LResourceAccessor$1;)V
</span><span class='line'>26: putstatic #2; //Field r:LResourceAccessor$Resource;
</span><span class='line'>
</span><span class='line'>Line 18 allocates memory
</span><span class='line'>Line 23 invokes the constructor
</span><span class='line'>Line 26 sets the reference to field r</span></code></pre></td></tr></table></div></figure>


<p>It is possible that the reference to field r be set prior to execution of the constructor (change execution order of lines 23 and 26) all along staying within the constraints enforced by happens-before. In fact there is at least one example of such an occurrence.</p>

<p>The reason that the following code</p>

<figure class='code'><figcaption><span>Correct double checked locking </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">ResourceAccessor</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="n">Resource</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Resource</span> <span class="nf">getResource</span><span class="o">(){</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span><span class="o">(</span><span class="n">ResourceAccessor</span><span class="o">.</span><span class="na">class</span><span class="o">){</span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Resource</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>executes correctly is because of the rule</p>

<ul>
<li>A write to a volatile field happens-before every subsequent read of that same field. Writes and reads of volatile fields have similar memory consistency effects as entering and exiting monitors, but do not entail mutual exclusion locking.</li>
</ul>


<p>which requires that the thread attempting to read variable r block until such time as resource referenced by r is not fully constructed.</p>
]]></content>
  </entry>
  
</feed>
